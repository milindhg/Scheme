#lang racket
(require C311/let-pair)
(provide (all-defined-out))
(require C311/trace)

(define-syntax do
  (syntax-rules (<-)
    ((_ bind e) e)
    ((_ bind (v <- e) e* e** ...)
     (bind e (lambda (v) (do bind e* e** ...))))
    ((_ bind e e* e** ...)
     (bind e (lambda (_) (do bind e* e** ...))))))

(define return-state
  (lambda (a)
    (lambda (s)
      `(,a . ,s))))

(define bind-state
  (lambda (ma f)
    (lambda (s)
      (let ([vs^ (ma s)])
        (let ([v (car vs^)]
              [s^ (cdr vs^)])
          ((f v) s^))))))

(define get-state
  (lambda (s) `(,s . ,s)))

(define put-state
  (lambda (new-s)
    (lambda (s)
      `(__ . ,new-s))))

(define return-cont
  (lambda (a)
    (lambda (k)
      (k a))))

(define bind-cont
  (lambda (ma f)
    (lambda (k)
      (let ((k^ (lambda (a)
                  (let ((mb (f a)))
                    (mb k)))))
        (ma k^)))))

(define callcc
  (lambda (g)
    (lambda (k)
      (let ((k-as-proc (lambda (a) (lambda (k^) (k a)))))
        (let ((ma (g k-as-proc)))
          (ma k))))))

(define return-maybe
  (lambda (a) `(Just ,a)))

(define bind-maybe
  (lambda (ma f)
    (cond
      [(eq? (car ma) 'Just) (f (cadr ma))]
      [(eq? (car ma) 'Nothing) '(Nothing)])))

(define fail
  (lambda ()
    '(Nothing)))

(define return-writer
  (lambda (a) `(,a . ())))

(define bind-writer
  (lambda (ma f)
    (let ([mb (f (car ma))])
      `(,(car mb) . ,(append (cdr ma) (cdr mb))))))

(define tell-writer
  (lambda (msg)
    `(__ . (,msg))))

(define partition-writer
  (lambda (pred ls)
    (cond
      [(eqv? ls '()) (return-writer '())]
      [(pred (car ls)) (bind-writer (tell-writer (car ls)) (lambda (x) (partition-writer pred (cdr ls))))]
      [else (bind-writer (partition-writer pred (cdr ls)) (lambda (d) (return-writer (cons (car ls) d))))])))



(partition-writer even? '())
;(())
(partition-writer even? '(1 2 3 4))
;((1 3) . (2 4))
(partition-writer even? '(1 2 3 4 5 6 7 8 9 10))
;((1 3 5 7 9) . (2 4 6 8 10))
(partition-writer odd? '(1 2 3 4 5 6 7 8 9 10))
;((2 4 6 8 10) . (1 3 5 7 9))

