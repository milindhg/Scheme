#lang racket
(require C311/let-pair)
(provide (all-defined-out))
(require C311/trace)

(define-syntax do
  (syntax-rules (<-)
    ((_ bind e) e)
    ((_ bind (v <- e) e* e** ...)
     (bind e (lambda (v) (do bind e* e** ...))))
    ((_ bind e e* e** ...)
     (bind e (lambda (_) (do bind e* e** ...))))))

(define return-state
  (lambda (a)
    (lambda (s)
      `(,a . ,s))))

(define bind-state
  (lambda (ma f)
    (lambda (s)
      (let ([vs^ (ma s)])
        (let ([v (car vs^)]
              [s^ (cdr vs^)])
          ((f v) s^))))))

(define get-state
  (lambda (s) `(,s . ,s)))

(define put-state
  (lambda (new-s)
    (lambda (s)
      `(__ . ,new-s))))

(define return-cont
  (lambda (a)
    (lambda (k)
      (k a))))

(define bind-cont
  (lambda (ma f)
    (lambda (k)
      (let ((k^ (lambda (a)
                  (let ((mb (f a)))
                    (mb k)))))
        (ma k^)))))

(define callcc
  (lambda (g)
    (lambda (k)
      (let ((k-as-proc (lambda (a) (lambda (k^) (k a)))))
        (let ((ma (g k-as-proc)))
          (ma k))))))

(define return-maybe
  (lambda (a) `(Just ,a)))

(define bind-maybe
  (lambda (ma f)
    (cond
      [(eq? (car ma) 'Just) (f (cadr ma))]
      [(eq? (car ma) 'Nothing) '(Nothing)])))

(define fail
  (lambda ()
    '(Nothing)))

(define return-writer
  (lambda (a) `(,a . ())))

(trace-define bind-writer
  (lambda (ma f)
    (let ([mb (f (car ma))])
      `(,(car mb) . ,(append (cdr ma) (cdr mb))))))

(define tell-writer
  (lambda (msg)
    `(__ . (,msg))))

(define power
  (lambda (x n)
    (cond
      [(zero? n) 1]
      [(= n 1) x]
      [(odd? n) (* x (power x (sub1 n)))]
      [(even? n) (let ((nhalf (/ n 2)))
                   (let ((y (power x nhalf)))
                     (* y y)))])))

(power 2 6)

;WIthout the do syntax. This is required.
(trace-define powerXpartials2
  (lambda (x n)
    (cond
      [(zero? n) (return-writer 1)]
      [(= n 1) (return-writer x)]
      [(odd? n) (bind-writer (powerXpartials x (sub1 n)) (lambda (d) `(,(* x d) . (,d))))]
      [(even? n) (let ((nhalf (/ n 2)))
                   (bind-writer (powerXpartials x nhalf) (lambda (d) `(,(* d d) . (,d)))))])))

;;With do syntax. This is tried to understand the do syntax for using bind-writer.
(trace-define powerXpartials
  (lambda (x n)
    (cond
      [(zero? n) (return-writer 1)]
      [(= n 1) (return-writer x)]
      [(odd? n) (do bind-writer (d <- (powerXpartials x (sub1 n))) `(,(* x d) . (,d)))]
      [(even? n) (let ((nhalf (/ n 2)))
                   (do bind-writer (d <- (powerXpartials x nhalf)) `(,(* d d) . (,d))))])))

(powerXpartials 4 4)

(powerXpartials 4 0)

(powerXpartials 4 1)

(powerXpartials 4 2)

(powerXpartials 4 3)

(powerXpartials 4 5)

(powerXpartials 2 6)
;(64 . (2 4 8))

(powerXpartials 3 5)
;(243 . (3 9 81))
 
(powerXpartials 5 7)
;(78125 . (5 25 125 15625))