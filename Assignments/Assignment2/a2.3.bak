#lang racket
(require C311/pmatch) ;; <-- important
(require C311/trace)


(trace-define union
              (Î» (ls1 ls2)
                (cond
                  ((null? ls2) ls1)
                  ((null? ls1) ls2)
                  ((eqv? #f (memv (car ls2) ls1)) (append (union (remv (car ls2) ls1) (cdr ls2)) ls2) ) 
                  (else (union ls1 (cdr ls2)))
                  )))


;;(union '() '())
(union '(x) '())
(union '(x) '(x))
(union '(x y) '(x y))
(union '(x y z w) '(x y z))
(union '() '(e r t))
(union '(e r t) '(e r t z))
