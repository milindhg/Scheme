#lang racket
(require C311/pmatch) ;; <-- important
(require C311/trace)

(trace-define value-of
  (lambda (exp env)
    (pmatch exp
            (`,n (guard (number? n)) n)            
            ;;(`,x (guard (box? x)) (env x)))
            (`,x (guard (symbol? x)) (env x))
            (`,b (guard (boolean? b)) b)
            (`(zero? ,n-exp) (zero? (value-of n-exp env)))
            (`(set! ,x ,valexp) (lambda (a) (set! x ((lambda (y) (if (eqv? y x) (value-of valexp env) (env y)))))) ) ;;(set! x valexp) )
            (`(* ,x ,y) (* (value-of x env) (value-of y env) ))
            (`(sub1 ,x) (sub1 (value-of x env)))
            (`(let ([ ,x ,val ]) ,body) `,(value-of body (lambda (y) (if (eqv? y x) (value-of val env) (env y)))) )
            (`(if ,test-exp ,then-exp ,else-exp) (if (value-of test-exp env) (value-of then-exp env) (value-of else-exp env)))
            (`(lambda (,x) ,body) (lambda (a) (value-of body (lambda (y) (if (eqv? y x) a (env y))))))
            (`(,rator ,rand) ((value-of rator env) (value-of rand env)))
            (`(begin2 ,arg1 ,arg2) (begin (value-of arg1 env) (value-of arg2 env) ) )
            )))



(define empty-env-ds
  (lambda ()
    '(list 'empty-env)
      ))

(define extend-env-ds
  (lambda (x a env)
    (list 'extend-env-ds x a env)
          ))

(define apply-env-ds
  (lambda (env y)
    (pmatch env
            (`(empty-env-ds) (error 'error))
            (`(extend-env-ds ,x ,a ,env) (if (eqv? y x) a (apply-env-ds env y)))
            )))


;(test "set!-1"
;(value-of
;'((lambda (a)
;((lambda (p)
;(begin2
;(p a)
;a)) (lambda (x) (set! x 4)))) 3)
;(lambda (y) (error 'value-of "unbound variable ~s" y)))
;3)

;(test "set!-2"
;(value-of
;'((lambda (f)
;((lambda (g)
;((lambda (z) (begin2
;(g z)
;z))
;55))
;(lambda (y) (f y)))) (lambda (x) (set! x 44)))
;(lambda (y) (error 'value-of "unbound variable ~s" y)))
;55)


;(test "set!-3"
(value-of
'((lambda (x)
(begin2 (set! x 5) x))
6)
(lambda (y) (error 'value-of "unbound variable ~s" y)))
;5)


;(test "set!-4"
;(value-of
;'(let ((a 3))
;(begin2 (begin2 a (set! a 4)) a))
;(lambda (y) (error 'value-of "unbound variable ~s" y)))
;4)


;(test "set!-5"
;(value-of
;'((lambda (x)
;(begin2
;((lambda (y)
;(begin2
;(set! x 0)
;98))
;99)
;x))
;97)
;(lambda (y) (error 'value-of "unbound variable ~s" y)))
;0)
;(test "set!-6"
;(value-of
;'((lambda (y)
;(let ((x (begin2
;(set! y 7)
;8)))
;(begin2
;(set! y 3)
;((lambda (z) y)
;x))))
;4)
;(lambda (y) (error 'value-of "unbound variable ~s" y)))
;3)
