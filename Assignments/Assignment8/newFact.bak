#lang racket


(define empty-k-reg
 (lambda ()
  (list 'empty-k-reg)))

(define fact-reg
 (lambda (n k)
  (lambda ()
   ((lambda (fact-reg k)
     (fact-reg fact-reg n k))
    (lambda (fact-reg n k)
     (cond
      [(zero? n) (apply-k-reg k 1)]
      [else (lambda () (fact-reg fact-reg (sub1 n) (inner-k-reg-fact n k)))]))
    k))))

(define inner-k-reg-fact
 (lambda (n^ k^)
  (list 'inner-k-reg-fact n^ k^)))


(define apply-k-reg
 (lambda (k v)
  (pmatch k
   [`(empty-k-reg) v]
   [`(inner-k-reg-fact ,n^ ,k^) (apply-k-reg k^ (* n^ v))])))
